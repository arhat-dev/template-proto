// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: foo.proto

package templategopb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Foo struct {
	// Types that are valid to be assigned to Bar:
	//	*Foo_A
	//	*Foo_B
	Bar isFoo_Bar `protobuf_oneof:"bar"`
}

func (m *Foo) Reset()      { *m = Foo{} }
func (*Foo) ProtoMessage() {}
func (*Foo) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ce1e2eec643ca48, []int{0}
}
func (m *Foo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Foo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Foo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Foo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Foo.Merge(m, src)
}
func (m *Foo) XXX_Size() int {
	return m.Size()
}
func (m *Foo) XXX_DiscardUnknown() {
	xxx_messageInfo_Foo.DiscardUnknown(m)
}

var xxx_messageInfo_Foo proto.InternalMessageInfo

type isFoo_Bar interface {
	isFoo_Bar()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type Foo_A struct {
	A string `protobuf:"bytes,1,opt,name=a,proto3,oneof" json:"a,omitempty"`
}
type Foo_B struct {
	B int32 `protobuf:"varint,2,opt,name=b,proto3,oneof" json:"b,omitempty"`
}

func (*Foo_A) isFoo_Bar() {}
func (*Foo_B) isFoo_Bar() {}

func (m *Foo) GetBar() isFoo_Bar {
	if m != nil {
		return m.Bar
	}
	return nil
}

func (m *Foo) GetA() string {
	if x, ok := m.GetBar().(*Foo_A); ok {
		return x.A
	}
	return ""
}

func (m *Foo) GetB() int32 {
	if x, ok := m.GetBar().(*Foo_B); ok {
		return x.B
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Foo) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Foo_A)(nil),
		(*Foo_B)(nil),
	}
}

func init() {
	proto.RegisterType((*Foo)(nil), "template.Foo")
}

func init() { proto.RegisterFile("foo.proto", fileDescriptor_7ce1e2eec643ca48) }

var fileDescriptor_7ce1e2eec643ca48 = []byte{
	// 172 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4c, 0xcb, 0xcf, 0xd7,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x28, 0x49, 0xcd, 0x2d, 0xc8, 0x49, 0x2c, 0x49, 0x55,
	0xd2, 0xe1, 0x62, 0x76, 0xcb, 0xcf, 0x17, 0xe2, 0xe3, 0x62, 0x4c, 0x94, 0x60, 0x54, 0x60, 0xd4,
	0xe0, 0xf4, 0x60, 0x08, 0x62, 0x4c, 0x04, 0xf1, 0x93, 0x24, 0x98, 0x14, 0x18, 0x35, 0x58, 0x41,
	0xfc, 0x24, 0x27, 0x56, 0x2e, 0xe6, 0xa4, 0xc4, 0x22, 0xa7, 0xe8, 0x0b, 0x0f, 0xe5, 0x18, 0x6e,
	0x3c, 0x94, 0x63, 0xf8, 0xf0, 0x50, 0x8e, 0xb1, 0xe1, 0x91, 0x1c, 0xe3, 0x8a, 0x47, 0x72, 0x8c,
	0x27, 0x1e, 0xc9, 0x31, 0x5e, 0x78, 0x24, 0xc7, 0xf8, 0xe0, 0x91, 0x1c, 0xe3, 0x8b, 0x47, 0x72,
	0x0c, 0x1f, 0x1e, 0xc9, 0x31, 0x4e, 0x78, 0x2c, 0xc7, 0x70, 0xe1, 0xb1, 0x1c, 0xc3, 0x8d, 0xc7,
	0x72, 0x0c, 0x51, 0xaa, 0x89, 0x45, 0x19, 0x89, 0x25, 0x7a, 0x29, 0xa9, 0x65, 0xfa, 0x30, 0x7b,
	0x75, 0xc1, 0xee, 0x80, 0x73, 0xd3, 0xf3, 0x0b, 0x92, 0x92, 0xd8, 0xc0, 0x62, 0xc6, 0x80, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x25, 0x87, 0xfd, 0x7a, 0xa8, 0x00, 0x00, 0x00,
}

func (this *Foo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Foo)
	if !ok {
		that2, ok := that.(Foo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Bar == nil {
		if this.Bar != nil {
			return false
		}
	} else if this.Bar == nil {
		return false
	} else if !this.Bar.Equal(that1.Bar) {
		return false
	}
	return true
}
func (this *Foo_A) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Foo_A)
	if !ok {
		that2, ok := that.(Foo_A)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.A != that1.A {
		return false
	}
	return true
}
func (this *Foo_B) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Foo_B)
	if !ok {
		that2, ok := that.(Foo_B)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.B != that1.B {
		return false
	}
	return true
}
func (this *Foo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&templategopb.Foo{")
	if this.Bar != nil {
		s = append(s, "Bar: "+fmt.Sprintf("%#v", this.Bar)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Foo_A) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&templategopb.Foo_A{` +
		`A:` + fmt.Sprintf("%#v", this.A) + `}`}, ", ")
	return s
}
func (this *Foo_B) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&templategopb.Foo_B{` +
		`B:` + fmt.Sprintf("%#v", this.B) + `}`}, ", ")
	return s
}
func valueToGoStringFoo(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Foo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Foo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Foo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Bar != nil {
		{
			size := m.Bar.Size()
			i -= size
			if _, err := m.Bar.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *Foo_A) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Foo_A) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.A)
	copy(dAtA[i:], m.A)
	i = encodeVarintFoo(dAtA, i, uint64(len(m.A)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}
func (m *Foo_B) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Foo_B) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintFoo(dAtA, i, uint64(m.B))
	i--
	dAtA[i] = 0x10
	return len(dAtA) - i, nil
}
func encodeVarintFoo(dAtA []byte, offset int, v uint64) int {
	offset -= sovFoo(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Foo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Bar != nil {
		n += m.Bar.Size()
	}
	return n
}

func (m *Foo_A) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.A)
	n += 1 + l + sovFoo(uint64(l))
	return n
}
func (m *Foo_B) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovFoo(uint64(m.B))
	return n
}

func sovFoo(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFoo(x uint64) (n int) {
	return sovFoo(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Foo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Foo{`,
		`Bar:` + fmt.Sprintf("%v", this.Bar) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Foo_A) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Foo_A{`,
		`A:` + fmt.Sprintf("%v", this.A) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Foo_B) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Foo_B{`,
		`B:` + fmt.Sprintf("%v", this.B) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringFoo(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Foo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Foo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Foo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field A", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bar = &Foo_A{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field B", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Bar = &Foo_B{v}
		default:
			iNdEx = preIndex
			skippy, err := skipFoo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoo
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFoo(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFoo
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFoo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFoo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFoo
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupFoo
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthFoo
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthFoo        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFoo          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupFoo = fmt.Errorf("proto: unexpected end of group")
)
